# Installs postgres:15.0-alpine image
FROM postgres:15.0-alpine

# Installs g++ compiler and alpine-sdk build tool
RUN apk add --update --no-cache g++ alpine-sdk

# Install most recent version of python3-dev
RUN apk --no-cache add python3-dev

# 1. Install most recent version of python3
# 2. Ensures pip is installed,
# 3. Removes the ensurepip to save on space
# 4. Installs setuptools,
# 5. Symbolic links pip <=> pip3
# 6. Symbolic links python <=> python3
# 7. Removes pip cache to save on space
RUN apk add --no-cache python3 && \
    python3 -m ensurepip && \
    rm -r /usr/lib/python*/ensurepip && \
    pip3 install --upgrade pip setuptools && \
    if [ ! -e /usr/bin/pip ]; then ln -s pip3 /usr/bin/pip ; fi && \
    if [[ ! -e /usr/bin/python ]]; then ln -sf /usr/bin/python3 /usr/bin/python; fi && \
    rm -r /root/.cache   

# Install flask, requests and psycopg2 libraries through pip
RUN pip install flask requests psycopg2-binary

# Sets working directory for docker container
WORKDIR /app

# Copies vital files for worker node
COPY ./app/startup.sh /app/startup.sh
COPY ./app/worker.py /app/worker.py
COPY ./app/schema.sql /app/schema.sql
COPY ./app/lib /app/lib

# Grant read/write access to the /app directory for the postgres user
RUN chown -R postgres:postgres /app && \
    chmod -R 755 /app

# Swaps user to postgres to change configurations and access database
USER postgres

# Modifies postgres configurations (initializes db and forces md5 password verification)
RUN chmod 0700 /var/lib/postgresql/data &&\
    initdb /var/lib/postgresql/data &&\
    echo "host all  all    0.0.0.0/0  md5" >> /var/lib/postgresql/data/pg_hba.conf &&\
    echo "listen_addresses='*'" >> /var/lib/postgresql/data/postgresql.conf

EXPOSE 5432
EXPOSE 5000

ENV DB_HOST=localhost
ENV DB_PORT=5432
ENV DB_NAME=postgres
ENV DB_USER=postgres
ENV DB_PASSWORD=postgres
ENV DB_SCHEMA=schema.sql
ENV PROGRAM=worker.py

CMD ["./startup.sh"]